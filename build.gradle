import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

plugins {
	id 'org.springframework.boot' version '2.7.18'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.bmuschko.docker-remote-api' version '7.2.0'
	id 'java'
}

group = 'com.gerenciamento'
version = '0.0.1-SNAPSHOT'
description = 'API Rest para gerenciamento de pessoas'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'junit:junit:4.13.2'
	implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.11.0'

	runtimeOnly 'mysql:mysql-connector-java:8.0.32'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

bootJar {
	launchScript()
}

tasks.withType(JavaExec).configureEach {
	systemProperties System.properties
}
tasks.register('buildDockerImage', DockerBuildImage) {
	inputDir = project.file('.')
	tags = ["${project.group}/${project.name}:${project.version}".toString()]
	buildArgs = ['JAR_FILE': tasks.named('bootJar').get().archiveFileName.get().toString()] as Map<? extends String, ? extends String>
}

tasks.register('pushDockerImage', DockerPushImage) {
	dependsOn buildDockerImage
	images = ["${project.group}/${project.name}:${project.version}".toString()]
}