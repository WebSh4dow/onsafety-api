import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.bmuschko.docker-remote-api' version '7.2.0'
}

group = 'com.jarmison.dev'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.apache.commons:commons-lang3:3.0'
	implementation 'org.springframework.boot:spring-boot-starter-mail:3.3.1'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	runtimeOnly 'com.mysql:mysql-connector-j'

	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('buildDockerImage', DockerBuildImage) {
	inputDir = project.file('.')
	tags = ["${project.group}/${project.name}:${project.version}".toString()]
	buildArgs = ['JAR_FILE': tasks.named('bootJar').get().archiveFileName.get().toString()] as Map<? extends String, ? extends String>
}

tasks.register('pushDockerImage', DockerPushImage) {
	dependsOn buildDockerImage
	images = ["${project.group}/${project.name}:${project.version}".toString()]
}
